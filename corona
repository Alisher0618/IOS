#!/bin/bash

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

print_help()
{
  echo "Usage: ./corona [-h|--help] [FILTER] [COMMAND] [LOG FILES]"
  echo ""
  echo "COMMANDS"
  echo "infected — spočítá počet nakažených."
  echo "merge — sloučí několik souborů se záznamy do jednoho, zachovávající původní pořadí"
  echo "gender — vypíše počet nakažených pro jednotlivá pohlaví."
  echo "age — vypíše statistiku počtu nakažených osob dle věku (bližší popis je níže)."
  echo "daily — vypíše statistiku nakažených osob pro jednotlivé dny."
  echo "monthly — vypíše statistiku nakažených osob pro jednotlivé měsíce."
  echo "yearly — vypíše statistiku nakažených osob pro jednotlivé roky."
  echo "countries — vypíše statistiku nakažených osob pro jednotlivé země nákazy (bez ČR, tj. kódu CZ)."
  echo "districts — vypíše statistiku nakažených osob pro jednotlivé okresy."
  echo "regions — vypíše statistiku nakažených osob pro jednotlivé kraje."
  echo ""
  echo "FILTERS"
  echo "-a DATETIME — after: jsou uvažovány pouze záznamy PO tomto datu (včetně tohoto data)."
  echo "-b DATETIME — before: jsou uvažovány pouze záznamy PŘED tímto datem (včetně tohoto data)."
  echo "-g GENDER — jsou uvažovány pouze záznamy nakažených osob daného pohlaví."
  echo "            GENDER může být M (muži) nebo Z (ženy)."
  echo "-s [WIDTH] — vypisuje data ne číselně, ale graficky v podobě histogramů. "
  exit
}

FILE=""


while [ $# -ne 0 ]; do
    case "$1" in 
        infected | merge | gender | age | daily | monthly | yearly | countries | districts | regions | mytest)
    
        COMMAND="$1"
        shift
        ;;

        -h | --help)
            print_help
            exit 0
            ;;

        -a)
            after_date="$2"
            shift
            shift
            ;;

        -b)
            before_date="$2"
            shift
            shift
            ;;

        -g)
            the_gender="$2"
            shift
            shift        
            ;;

        -s)
            if [ -f "$2" ]; then
                echo "ERROR: Invalid arguments or their order. Run ./corona -h | --help" >&2
                exit 3 
            else
                filter_width="$2"
                shift
                shift
            fi
            ;;

        *.gz)
        if [ -r "$1" ] && [ -z "$FILE" ]; then
            FILE=$(gzip -d -c "$1")
        elif [ -r "$1" ] && [ -n "$FILE" ]; then
            FILE=$(echo "$FILE" && gzip -d -c "$1")             
        else
            echo "ERROR: Something went wrong. Run ./corona -h | --help" >&2
            exit 1
        fi
        shift
        ;;

        *.bz2)
        if [ -r "$1" ] && [ -z "$FILE" ]; then
            FILE=$(bzip2 -d -c "$1")
        elif [ -r "$1" ] && [ -n "$FILE" ]; then
            FILE=$(echo "$FILE" && bzip2 -d -c "$1")               
        else
            echo "ERROR: Something went wrong. Run ./corona -h | --help" >&2
            exit 1
        fi
        shift
        ;;

        *.csv)
        if [ -r "$1" ] && [ -z "$FILE" ]; then
            FILE=$(cat "$1")
        elif [ -r "$1" ] && [ -n "$FILE" ]; then
            FILE=$(echo "$FILE" && cat "$1")
        else
            echo "ERROR: Something went wrong. Run ./corona -h | --help" >&2
            exit 1
        fi
        shift
        ;;
   
        *)
            echo "ERROR: Invalid arguments or their order. Run ./corona | --help" >&2
            exit 3
        
    esac
done


if [ -z "$FILE" ]; then
  FILE=$(cat)                       #if command and filter are not specified
fi



#-------------------------------------------------------COMMANDS---------------------------------------------------------------------------------------------

f_merge(){
    echo "$FILE" | awk '{if(! a[$1]){print; a[$1]++}}'  #removes the same rows and write to the first file
}

f_infected(){
    FILE=$(echo "$FILE" | awk '{ gsub(/ /,""); print }')                                    #removes spaces from records
    echo "$FILE" | awk -F ',' '{
        if(!($2=="datum") && !($0 ~ /^[[:space:]]*$/)) FILE[$2]++;                          #if $2 is not "datum" and the whole row is not empty
        if (!($3 ~ /^[0-9]+$/) && !($3 == "vek") && !($3 == "")){                           #control for age, if age is not integer, then it is incorrect   
            
            check_age[$0]++;
            
            if((!($2 ~ /^(20[0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[01])$/) || 
            ($2 ~ /^(20[0-9][0-9])-(0[469]|1[1])-(3[1-9])$/) || ($2 ~ /^(20[0-9][0-9])-(0[2])-(3[0-9])$/)) && !($2 == "datum") && !($2 == "") )
            {
                check_date[$0]++;                                                           #control for date, i used some regular expressions. 
                FILE[$2]--;
            }
            
            else{
                FILE[$2]--;
            }

        }else if((!($2 ~ /^(20[0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[01])$/) || 
            ($2 ~ /^(20[0-9][0-9])-(0[469]|1[1])-(3[1-9])$/) || ($2 ~ /^(20[0-9][0-9])-(0[2])-(3[0-9])$/)) && !($2 == "datum") && !($2 == "") ){
                
            check_date[$0]++;

            if (!($3 ~ /^[0-9]+$/) && !($3 == "vek") && !($3 == "")){
                check_age[$0]++;
                FILE[$2]--;
            }
            else{
                FILE[$2]--;
            }                              #this is not the best way, but it also checks, if record has date and age incorrect

        }

    }END{for(i in FILE)k += FILE[i]; print k;
        for(age in check_age)print"Invalid age: "age| "cat 1>&2";               #writing to stderr
        for(date in check_date) print"Invalid date: "date| "cat 1>&2";  
    }' | sort
}                                               #the same algorithm i used for all functions

f_gender(){
    FILE=$(echo "$FILE" | awk '{ gsub(/ /,""); print }')
    echo "$FILE" | awk -F ',' '{

        if(!($4=="pohlavi") && !($0 ~ /^[[:space:]]*$/)) FILE[$4]++;
        if($4 == "")none++;
        if (!($3 ~ /^[0-9]+$/) && !($3 == "vek") && !($3 == "")){ 
            
            check_age[$0]++;
            
            if((!($2 ~ /^(20[0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[01])$/) || 
            ($2 ~ /^(20[0-9][0-9])-(0[469]|1[1])-(3[1-9])$/) || ($2 ~ /^(20[0-9][0-9])-(0[2])-(3[0-9])$/)) && !($2 == "datum") && !($2 == "") )
            {
                check_date[$0]++;
                FILE[$4]--;
            }
            
            else{
                FILE[$4]--;
            }

        }else if((!($2 ~ /^(20[0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[01])$/) || 
            ($2 ~ /^(20[0-9][0-9])-(0[469]|1[1])-(3[1-9])$/) || ($2 ~ /^(20[0-9][0-9])-(0[2])-(3[0-9])$/)) && !($2 == "datum") && !($2 == "") ){
                
            check_date[$0]++;

            if (!($3 ~ /^[0-9]+$/) && !($3 == "vek") && !($3 == "")){
                check_age[$0]++;
                FILE[$4]--;
            }
            else{
                FILE[$4]--;
            }   

        } 

    } END {
        for(i in FILE)if(i != "")printf "%s: %s\n", i, FILE[i];
        if(none > 0)print "None:", none;
        for(age in check_age)print"Invalid age: "age| "cat 1>&2";
        for(date in check_date) print"Invalid date: "date| "cat 1>&2";
    }'

    
}


f_age(){
    FILE=$(echo "$FILE" | awk '{ gsub(/ /,""); print }')
    FILE=$(echo "$FILE" | awk -F ',' '{
        FILE[$3]++;
        
        if($3 == "vek")FILE[$3]--;

        if (!($3 ~ /^[0-9]+$/) && !($3 == "vek") && !($3 == "")){ 
            
            check_age[$0]++;
            
            if((!($2 ~ /^(20[0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[01])$/) || 
            ($2 ~ /^(20[0-9][0-9])-(0[469]|1[1])-(3[1-9])$/) || ($2 ~ /^(20[0-9][0-9])-(0[2])-(3[0-9])$/)) && !($2 == "datum") && !($2 == "") )
            {
                check_date[$0]++;
                FILE[$3]--;
            }
            
            else{
                FILE[$3]--;
            }

        }else if((!($2 ~ /^(20[0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[01])$/) || 
            ($2 ~ /^(20[0-9][0-9])-(0[469]|1[1])-(3[1-9])$/) || ($2 ~ /^(20[0-9][0-9])-(0[2])-(3[0-9])$/)) && !($2 == "datum") && !($2 == "") ){
                
            check_date[$0]++;

            if (!($3 ~ /^[0-9]+$/) && !($3 == "vek") && !($3 == "")){
                check_age[$0]++;
                FILE[$3]--;
            }
            else{
                FILE[$3]--;
            }   
        }
    }END{
        for(i in FILE){if(i >= 0 && i <= 5)age1 += FILE[i];
            else if(i >= 6 && i <= 15)age2 += FILE[i];
            else if(i >= 16 && i <= 25)age3 += FILE[i];
            else if(i >= 26 && i <= 35)age4 += FILE[i];
            else if(i >= 36 && i <= 45)age5 += FILE[i];
            else if(i >= 46 && i <= 55)age6 += FILE[i];
            else if(i >= 56 && i <= 65)age7 += FILE[i];
            else if(i >= 66 && i <= 75)age8 += FILE[i];
            else if(i >= 76 && i <= 85)age9 += FILE[i];
            else if(i >= 86 && i <= 95)age10 += FILE[i];
            else if(i >= 96 && i <= 105)age11 += FILE[i];
            else if(i > 105)age12 += FILE[i];
            else if(i == "")none += FILE[i];

        }
        printf("0-5   : %d\n6-15  : %d\n16-25 : %d\n26-35 : %d\n36-45 : %d\n46-55 : %d\n56-65 : %d\n66-75 : %d\n76-85 : %d\n86-95 : %d\n96-105: %d\n>105  : %d\nNone  : %d\n", age1,
        age2, age3, age4, age5, age6, age7, age8, age9, age10, age11, age12, none);
        for(age in check_age)print"Invalid age: "age| "cat 1>&2";
        for(date in check_date) print"Invalid date: "date| "cat 1>&2";
        
    }')
    echo "$FILE"
}


f_daily(){
    FILE=$(echo "$FILE" | awk '{ gsub(/ /,""); print }')
    echo "$FILE" | awk -F ',' '{
        if($2 == "" && $0 != "") None++;
        if(!($2=="datum")) FILE[$2]++;
        if (!($3 ~ /^[0-9]+$/) && !($3 == "vek") && !($3 == "")){ 
            check_age[$0]++;
            FILE[$2]--;
        }



        if((!($2 ~ /^(20[0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[01])$/) || 
        ($2 ~ /^(20[0-9][0-9])-(0[469]|1[1])-(3[1-9])$/) || ($2 ~ /^(20[0-9][0-9])-(0[2])-(3[0-9])$/)) && !($2 == "datum") && !($2 == ""))
        {
            check_date[$0]++;
            FILE[$2]--;
        }
    }

    END{for(i in FILE){ if((i != "") && FILE[i] > 0) printf("%s: %s\n", i, FILE[i]);}
        if(None > 0)printf("None: %s\n", None);
        for(age in check_age)print"Invalid age: "age| "cat 1>&2";
        for(date in check_date) print"Invalid date: "date| "cat 1>&2"; 
    }' | sort

    
}


f_monthly(){
    FILE=$(echo "$FILE" | awk '{ gsub(/ /,""); print }')
    FILE=$(echo "$FILE" | awk -F ',' '{
        if($2 == "" && $0 != "") None++;
        split($2, array, "-");
        list = array[1]"-"array[2]
        check_list = array[1]"-"array[2]"-"array[3]
        if(list != "datum-")FILE[list]++;
        if (!($3 ~ /^[0-9]+$/) && !($3 == "vek") && !($3 == "")){ 
            check_age[$0]++;
            FILE[list]--;
        }

        if((!(check_list ~ /^(20[0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[01])$/) || 
        (check_list  ~ /^(20[0-9][0-9])-(0[469]|1[1])-(3[1-9])$/) || (check_list  ~ /^(20[0-9][0-9])-(0[2])-(3[0-9])$/))  && !(check_list == "datum--") && !($2 == ""))
        {
            check_date[$0]++;
            FILE[list]--;
        }
    }
    END{
        for(i in FILE){if(i != "-" && FILE[i] >= 0)printf("%s: %s\n", i, FILE[i]);}
        if(None > 0)printf("None: %s\n", None);
        for(age in check_age)print"Invalid age: "age| "cat 1>&2";
        for(date in check_date) print"Invalid date: "date| "cat 1>&2";
    }' | sort)
    
    echo "$FILE"
    
}

f_yearly(){
    FILE=$(echo "$FILE" | awk '{ gsub(/ /,""); print }')
    FILE=$(echo "$FILE" | awk -F ',' '{
        if($2 == "" && $0 != "") None++;
        split($2, array, "-");
        list = array[1];
        check_list = array[1]"-"array[2]"-"array[3]
        if(list != "datum")FILE[list]++;
        if (!($3 ~ /^[0-9]+$/) && !($3 == "vek") && !($3 == "")){ 
            check_age[$0]++
            FILE[list]--;
        }

        if((!(check_list ~ /^(20[0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[01])$/) || 
        (check_list  ~ /^(20[0-9][0-9])-(0[469]|1[1])-(3[1-9])$/) || (check_list  ~ /^(20[0-9][0-9])-(0[2])-(3[0-9])$/)) && !(check_list == "datum--") && !($2 == ""))
        {
            check_date[$0]++;
            FILE[list]--;
        }

    }
    END{
        for(i in FILE)if(i != "" && FILE[i] >= 0) {printf("%s: %s\n", i, FILE[i]);}
        if(None > 0)printf("None: %s\n", None);
        for(age in check_age)print"Invalid age: "age| "cat 1>&2";
        for(date in check_date) print"Invalid date: "date| "cat 1>&2";
    }' | sort)

    echo "$FILE"
}

f_countries(){
    FILE=$(echo "$FILE" | awk '{ gsub(/ /,""); print }')
    FILE=$(echo "$FILE" | awk -F ',' '{ 
        if(!($8=="nakaza_zeme_csu_kod") && !($8 == "CZ")) FILE[$8]++;
        if (!($3 ~ /^[0-9]+$/) && !($3 == "vek") && !($3 == "")){ 
            check_age[$0]++;
            FILE[$8]--;
        }

        if((!($2 ~ /^(20[0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[01])$/) || 
        ($2 ~ /^(20[0-9][0-9])-(0[469]|1[1])-(3[1-9])$/) || ($2 ~ /^(20[0-9][0-9])-(0[2])-(3[0-9])$/)) && !($2 == "datum") && !($2 == "") )
        {
            check_date[$0]++;
            FILE[$8]--;
        }
    }

    END{for(i in FILE)if(i != "") printf "%s: %s\n", i, FILE[i] |"sort -k1";
        for(age in check_age)print"Invalid age: "age| "cat 1>&2";
        for(date in check_date) print"Invalid date: "date| "cat 1>&2"; 
    }')
    echo "$FILE"

}

f_districts(){
    FILE=$(echo "$FILE" | awk '{ gsub(/ /,""); print }')
    echo "$FILE" | awk -F ',' '{ 
        if(!($6=="okres_lau_kod")) FILE[$6]++;
        if($6 == "") None++;
        if (!($3 ~ /^[0-9]+$/) && !($3 == "vek") && !($3 == "")){ 
            check_age[$0]++;
            FILE[$6]--;
        }

        if((!($2 ~ /^(20[0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[01])$/) || 
        ($2 ~ /^(20[0-9][0-9])-(0[469]|1[1])-(3[1-9])$/) || ($2 ~ /^(20[0-9][0-9])-(0[2])-(3[0-9])$/)) && !($2 == "datum") && !($2 == "") )
        {
            check_date[$0]++;
            FILE[$6]--;
        }
    }

    END{for(i in FILE)if(i != "") printf "%s: %s\n", i, FILE[i] |"sort -k1";
        if(None > 0)printf("None: %s\n", None);
        for(age in check_age)print"Invalid age: "age| "cat 1>&2";
        for(date in check_date) print"Invalid date: "date| "cat 1>&2"; 

    }'

}


f_regions(){
    FILE=$(echo "$FILE" | awk '{ gsub(/ /,""); print }')
    echo "$FILE" | awk -F ',' '{ 
        if(!($5=="kraj_nuts_kod")) FILE[$5]++;
        if($5 == "") None++;
        if (!($3 ~ /^[0-9]+$/) && !($3 == "vek") && !($3 == "")){ 
            check_age[$0]++;
            FILE[$5]--;
        }

        if((!($2 ~ /^(20[0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[01])$/) || 
        ($2 ~ /^(20[0-9][0-9])-(0[469]|1[1])-(3[1-9])$/) || ($2 ~ /^(20[0-9][0-9])-(0[2])-(3[0-9])$/)) && !($2 == "datum") && !($2 == "") )
        {
            check_date[$0]++;
            FILE[$5]--;
        }
    }

    END{for(i in FILE)if(i != "") printf "%s: %s\n", i, FILE[i] |"sort -k1";
        if(None > 0)printf("None: %s\n", None);
        for(age in check_age)print"Invalid age: "age| "cat 1>&2";
        for(date in check_date) print"Invalid date: "date| "cat 1>&2";

    }'

}




#---------------------------------------------------------FILTERS------------------------------------------------------------------------------
if [ -n "$filter_width" ]; then
    if ! [[ "$filter_width" =~ ^[0-9]+$ ]];then  #For these cases if the [WIDTH] is not specified, $2 is name of command. 
        COMMAND="$filter_width"
    fi
fi

if [ -n "$after_date" ]; then
    if [[ "$after_date" =~ ^(20[0-9][0-9])-(0[2])-(3[0-9])$ || "$after_date" =~ ^(20[0-9][0-9])-(0[469]|1[1])-(3[1-9])$
     || !("$after_date" =~ ^(20[0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[01])$) ]]; then
    
        echo "ERROR: Invalid date format. Run ./corona -h | --help" >&2
        exit 1
    else
        FILE=$(for i in $after_date
        do
            FILE=$(echo "$FILE" | awk -F ',' -v date="$i" '$2 >= date || $2 == "datum" {print $0}')
            echo "$FILE" |cat -n | sort -uk2 | sort -nk1 | cut -f2-
        done)
        
    fi
fi

if [ -n "$before_date" ]; then
    if [[ "$before_date" =~ ^(20[0-9][0-9])-(0[2])-(3[0-9])$ || "$before_date" =~ ^(20[0-9][0-9])-(0[469]|1[1])-(3[1-9])$ 
        || !("$before_date" =~ ^(20[0-9][0-9])-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[01])$) ]]; then
    
        echo "ERROR: Invalid date format. Run ./corona -h | --help" >&2
        exit 1
    else
        FILE=$(for i in $before_date
        do
            FILE=$(echo "$FILE" | awk -F ',' -v date="$i" '$2 <= date || $2 == "datum" {print $0}')
            echo "$FILE" |cat -n | sort -uk2 | sort -nk1 | cut -f2-
        done)
        
    fi
fi

if [ -n "$the_gender" ]; then
    if ! [[ "$the_gender" =~ "M" || "$the_gender" =~ "Z" ]]; then

        echo "ERROR: Invalid gender format. Run ./corona -h | --help" >&2
        exit 1

    else
        FILE=$(for i in $the_gender
        do
            FILE=$(echo "$FILE" | awk -F "," -v gen="$i" '$4 == gen || $4 == "pohlavi" {print $0}')
            echo "$FILE" | cat -n | sort -uk2 | sort -nk1 | cut -f2-

        done)  
    fi
fi


searching_max(){
    echo "$FILE" | awk -F ': ' '{
    file[$2]++
    }END{
    for(i in file){
        max = -1
        if(i ~ /^[0-9]+$/){             #function for -s [WIDTH], it helps to find the greatest number
            if(i > 0 + max) max = i;
        }
    }
    print max
    
    }'
}


case "$COMMAND" in
    infected)
        FILE=$(f_infected)
    ;;
    merge)
        FILE=$(f_merge)
    ;;
    gender)
        FILE=$(f_gender)
        if [ -n "$filter_width" ]; then
            if [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v var="$filter_width" -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = int(MAX / var)
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')              
            elif ! [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = 100000
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')
            fi
        fi
    ;;
    age)
        FILE=$(f_age)
        if [ -n "$filter_width" ]; then
            if [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v var="$filter_width" -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = int(MAX / var)
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')              
            elif ! [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = 10000
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')
            fi
        fi
    ;;
    daily)
        FILE=$(f_daily)
        if [ -n "$filter_width" ]; then
            if [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v var="$filter_width" -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = int(MAX / var)
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')              
            elif ! [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = 500
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')
            fi
        fi
    ;; 
    monthly)
        FILE=$(f_monthly)
        if [ -n "$filter_width" ]; then
            if [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v var="$filter_width" -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = int(MAX / var)
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')              
            elif ! [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = 10000
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')
            fi
        fi
    ;;
    yearly)
        FILE=$(f_yearly)
        if [ -n "$filter_width" ]; then
            if [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v var="$filter_width" -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = int(MAX / var)
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')              
            elif ! [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = 100000
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')
            fi
        fi
    ;;
    countries)
        FILE=$(f_countries)
        if [ -n "$filter_width" ]; then
            if [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v var="$filter_width" -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = int(MAX / var)
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')              
            elif ! [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = 100
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')
            fi
        fi
    ;;
    districts)
        FILE=$(f_districts)
        if [ -n "$filter_width" ]; then
            if [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v var="$filter_width" -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = int(MAX / var)
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')              
            elif ! [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = 1000
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')
            fi
        fi
    ;;
    regions)
        FILE=$(f_regions)
        if [ -n "$filter_width" ]; then
            if [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v var="$filter_width" -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = int(MAX / var)
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')              
            elif ! [[ "$filter_width" =~ ^[0-9]+$ ]];then
                MAX=$(searching_max)
                FILE=$( echo "$FILE" | awk -v MAX="$MAX" '{
                    split($0, array, ": ")
                    num = 10000
                    printf array[1]": "
                    if(array[2] ~ /^[0-9]+$/){ for(i = 0; i < int(array[2] / num); i++){printf "#"} printf "\n"} else{print array[2]} 
                    #printf "%s: %s", array[1], array[2] ~ /^[0-9]+$/ ? for (i = 0; i < num; i++){print "#"} : (print array[2])

                }')
            fi
        fi
    ;;
esac

echo "$FILE"
exit 0

